// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateAccount = `-- name: CreateAccount :exec
insert into accounts (id, created_at)
values (
       $1,
       $2
)
`

type CreateAccountParams struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateAccount(ctx context.Context, db DBTX, arg CreateAccountParams) error {
	_, err := db.Exec(ctx, CreateAccount, arg.ID, arg.CreatedAt)
	return err
}

const CreateEvent = `-- name: CreateEvent :exec
insert into account_events (id, account_id, type, amount, created_at)
values (
        $1,
        $2,
        $3,
        $4,
        $5
       )
`

type CreateEventParams struct {
	ID        pgtype.UUID
	AccountID pgtype.UUID
	Type      string
	Amount    int32
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateEvent(ctx context.Context, db DBTX, arg CreateEventParams) error {
	_, err := db.Exec(ctx, CreateEvent,
		arg.ID,
		arg.AccountID,
		arg.Type,
		arg.Amount,
		arg.CreatedAt,
	)
	return err
}

const GetAccount = `-- name: GetAccount :one
select id, created_at
from accounts
where id = $1
`

func (q *Queries) GetAccount(ctx context.Context, db DBTX, id pgtype.UUID) (Account, error) {
	row := db.QueryRow(ctx, GetAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const ListAccountEvents = `-- name: ListAccountEvents :many
select id, account_id, type, amount, created_at
from account_events
where $1 = $1
order by id desc
limit $2
`

type ListAccountEventsParams struct {
	AccountID interface{}
	PageSize  int32
}

// and id < @last_fetched_id
func (q *Queries) ListAccountEvents(ctx context.Context, db DBTX, arg ListAccountEventsParams) ([]AccountEvent, error) {
	rows, err := db.Query(ctx, ListAccountEvents, arg.AccountID, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountEvent
	for rows.Next() {
		var i AccountEvent
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Type,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
