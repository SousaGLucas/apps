// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateUser = `-- name: CreateUser :exec
insert into users (id, name, email, hashPassword, created_at)
values (
        $1,
        $2,
        $3,
        $4,
        $5
       )
`

type CreateUserParams struct {
	ID           pgtype.UUID
	Name         string
	Email        string
	Hashpassword string
	CreatedAt    pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) error {
	_, err := db.Exec(ctx, CreateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Hashpassword,
		arg.CreatedAt,
	)
	return err
}

const GetUsers = `-- name: GetUsers :one
select id, name, email, hashpassword, created_at, updated_at
from users
where $1 = $1
`

func (q *Queries) GetUsers(ctx context.Context, db DBTX, id interface{}) (User, error) {
	row := db.QueryRow(ctx, GetUsers, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Hashpassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListUsers = `-- name: ListUsers :many
select id, name, email, hashpassword, created_at, updated_at
from users
`

func (q *Queries) ListUsers(ctx context.Context, db DBTX) ([]User, error) {
	rows, err := db.Query(ctx, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Hashpassword,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
